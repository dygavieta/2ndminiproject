path <- file.path("specdata")
#==========Step 1: Merges the training and the test sets to create one data set================
#Merging same terms
#Subject
subject_test  <- read.table(file.path(path, "test", "subject_test.txt"),col.names = "subject")
subject_train <- read.table(file.path(path, "train", "subject_train.txt"),col.names = "subject")
#row bind
subject_data <- rbind(subject_train, subject_test)
#Y
y_test  <- read.table(file.path(path, "test" , "y_test.txt" ),col.names = "activity")
y_train  <- read.table(file.path(path, "train" , "y_train.txt" ),col.names = "activity")
#row bind
y_data <- rbind(y_train, y_test)
#X
x_test  <- read.table(file.path(path, "test", "X_test.txt"),header = FALSE)
x_train  <- read.table(file.path(path, "train", "X_train.txt"),header = FALSE)
#row bind
x_data <- rbind(x_train, x_test)
dataFeatures <- read.table(file.path(path, "features.txt"),head=FALSE)
names(x_data)<- dataFeatures$V2
#store feature list
dataCombine <- cbind(subject_data, y_data)
mergedData <- cbind(x_data, dataCombine)
#==========Step 2: Extracts only the measurements on the mean and standard deviation for each measurement================
temp <-dataFeatures$V2[grep("mean\\(\\)|std\\(\\)", dataFeatures$V2)]
names<-c(as.character(temp), "subject", "activity" )
extractedData<-subset(mergedData,select=names)
str(extractedData)
#====================Step 3: Uses descriptive activity names to name the activities in the data set======================
#import activity table labels
activityLabels <- read.table(file.path(path, "activity_labels.txt"),header = FALSE)
#factor allows you to put a label coressponding to the activityLabels  and the activity number of the extracted data
extractedData$activity <- factor(extractedData$activity, labels = activityLabels$V2)
main_data <- extractedData
str(main_data)
#=======================Step 4: Appropriately labels the data set with descriptive variable names===============================
#using gsub to substitute a certain value
names(main_data)<-gsub("^t", "time", names(main_data))
names(main_data)<-gsub("Acc", "Accelerometer", names(main_data))
names(main_data)<-gsub("Gyro", "Gyroscope", names(main_data))
names(main_data)<-gsub("Mag", "Magnitude", names(main_data))
names(main_data)<-gsub("^f", "frequency", names(main_data))
names(main_data)<-gsub("BodyBody", "Body", names(main_data))
names(main_data)<-gsub("-mean", "Mean", names(main_data))
names(main_data)<-gsub("-std", "STD", names(main_data))
#===========Step 5: From the data set in step 4, create a second, independent tidy data set with the average of each variable for each activity and each subject.=====================)
#Using dplyr library to calculate mean by group
library(dplyr)
tidyData <- main_data %>%
#group by subject and activity
group_by(subject, activity) %>%
#summarise_all with a funtion mean
summarise_all(list(name = mean))
tidyData
path <- file.path("specdata")
#list rows with the the pattern 1/2/2007 or 2/2/2007
x <- grep("^1/2/2007|^2/2/2007", readLines(file.path(path, "household_power_consumption.txt")), value = FALSE)
data <-   read.table(file.path(path, "household_power_consumption.txt"),
sep = ";",
nrows = length(x), # rows only to be read
skip = x[1]-1,  # skip data until the first element of x
na.strings = "?",
col.names = read.table(file.path(path,"household_power_consumption.txt"),
sep = ";",
nrows = 1),
colClasses=c("character","character","numeric","numeric","numeric","numeric","numeric","numeric","numeric")
)
#not included missing files
data <- na.omit(data)
#date time combined
str(data)
#=============PLOT 1=============
#Histogram
png(filename  = "plot1.png")
hist(data$Global_active_power, col ="red", xlab="Global Active Power (kilowatts)", main="Global Active Power" )
dev.off()
#=============PLOT 2=============
#Plot
png(filename ="plot2.png" )
#type l for lines ; xlab no title ;xaxt no tick marks
plot(data$Global_active_power, type = "l", xlab="" , ylab="Global Active Power (kilowatts)", xaxt='n')
#Asumming there are 2880 ommitted according to str(data) divided by 2
#side 1 = below ;at = tick marks plamcement, labels = tick mark label
axis(side=1, at=c(1, 1440, 2880), labels=c("Thu","Fri","Sat"))
dev.off()
#=============PLOT 3=============
png(filename ="plot3.png" )
plot(data$Sub_metering_1, type = "l", xlab="" , ylab="Energy sub metering", xaxt='n')
lines(data$Sub_metering_2, col = "red")
lines(data$Sub_metering_3, col = "blue")
axis(side=1, at=c(1, 1440, 2880), labels=c("Thu","Fri","Sat"))
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),lty = 1, col = c("black","red", "blue"))
dev.off()
#=============PLOT 4=============
png(filename ="plot4.png" )
#allow 4 plots in one image 2 col 2 row
par(mfrow=c(2,2))
#plot 2
plot(data$Global_active_power, type = "l", xlab="" , ylab="Global Active Power", xaxt='n')
#new plot Voltage
plot(data$Voltage, type = "l", xlab="datetime" , ylab="Voltage", xaxt='n')
axis(side=1, at=c(1, 1440, 2880), labels=c("Thu","Fri","Sat"))
#plot3
plot(data$Sub_metering_1, type = "l", xlab="" , ylab="Energy sub metering", xaxt='n')
lines(data$Sub_metering_2, col = "red")
lines(data$Sub_metering_3, col = "blue")
axis(side=1, at=c(1, 1440, 2880), labels=c("Thu","Fri","Sat"))
#bty="n" = no border
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),lty = 1, col = c("black","red", "blue"), bty="n")
#new plot Reactive Power
plot(data$Global_reactive_power, type = "l", xlab="datetime" , ylab="Global_reactive_power", xaxt='n')
axis(side=1, at=c(1, 1440, 2880), labels=c("Thu","Fri","Sat"))
dev.off()
